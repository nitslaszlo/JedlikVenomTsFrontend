Vizsga előtti feladatok:
========================
1. Telepítse és konfigurálja számítógépére a VS-Code Vue.js fejlesztői környezetet!
2. Telepítse a Postman programot!
3. Klónozza munkakönyvtárába a következő repository-kat:
   - https://github.com/nitslaszlo/JedlikVenomTsBackend
   - https://github.com/nitslaszlo/JedlikVenomTsFrontend
4. Telepítse a klónozott repository-k lokális node csomagjait! (npm i)


MongoDB előkészítése
====================
1. Hozzon létre az MongoDB adatbázis számára könyvtárat a "C" meghajtón! (C:\data\db)
2. Készítsen m.bat néven parancsállományt, amely a MongoDb szervert indítja!
3. Indítsa el a MongoDB szervert a localhost-on!
4. Importálja az adatokat a MongoDb szerver CRMdb adatbázisának CsudijoFoodCollection kollekciójába a data.json állományból!

Feladatok a backend oldalon:
============================
1. Indítsa el az előkészített backend alkalmazást!
2. Bővítse a csudijoSchema sémát két új szöveges mezővel az ételleírások (pictureURL) és a képek URL-jének (description) tátolásához!
3. Készítsen a csudijoController.ts állományba metódust getNumberOfFoods() néven, ami a CsudijoFoodCollection kollekcióban lévő
   rekordok számát küldi válaszként a frontend-nek JSON objektumban!
4. Készítsen a csudijoController.ts állományba metódust getPageOfFoods() néven, ami a CsudijoFoodCollection kollekcióban lévő
   rekordokat küldi válaszként a frontend-nek! A metódus a rekordokat "oldalakra tagolva" csak a megadott rekordszám/oldal (perPage)
   darab rekordot küldje a megadott oldaltól (page) kezdve! A két érték (perPage, page) a kérés paramétere lesz!
   A rekordokat rendezze elsődlegesen a szavazatok száma szerint csökkenő, másodlagosan az ételek neve szerint növekvő sorrendbe!
5. A getTopFoods() metódus módosításával csökkentse az adatforgalom mennyiségét!
   Oldja meg, hogy csak az étel/ételek neve legyen az API válaszában küldve a frontendnek!
6. Oldja meg, hogy a "/csudijo/count" route (útvonal) GET kérésénél a getNumberOfFoods() metódus legyen meghívva!
7. Oldja meg, hogy a "/csudijo/page/:page/perPage/:perPage" route GET kérésénél a getPageOfFoods() metódus legyen meghívva!
8. Tesztelje a Postman programmal az új útvonalakat és a getTopFoods() metódus módosított működését!
   A tesztelés eredményéről készítsen képeket Postman1.jpg, Postman2.jpg és Postman3.jpg néven
   melyeket a backend projekt főkönyvtárába mentsen!

Feladatok a frontend oldalon:
=============================
1. Keresse meg azt a változót, ami a megjelenő rekordok számát határozza meg! Módosítsa értékét 6-ra!
2. Készítsen a store-ba új akciómetódust getNumberOfFoods() azonosítóval! A metódus axios GET hívással kérdezze le
   a "/csudijo/count" útvonal API válaszát!
   Válasz érkezése esetén a mutateNumberOfFoods() új mutáció hívásával állítsa be a store-ban
   az újonnan létrehozott _numberOfFoods szám típusú mezőt!
3. Módosítsa a numberOfFoods() getter-t, ami a _numberOfFoods mező értékével térjen vissza!
4. Módosítsa a getFoods() akciómetódust! A GET kérés a "/csudijo/page/${this.__currentPage}/perPage/${this.__perPage}"
   útvonal API válaszát dolgozza fel! A metódus hívja meg a getNumberOfFoods() akciómetódust is a mutáció hívása után!
5. Módosítsa a mutateTopFoods() mutációt a backend API alkalmazásban elvégzett módosításnak megfelelően!
6. A "Rólunk" megjegyzést követő keretben (div) Bootstrap4 rács alkalmazásával jelenítse meg az ételkártyákat
   reszponzívan a minta szerint Bootstrap4 kártyák felhasználásával!
   Az oszlopok száma 1(sm), 2(md) és 3(xl) legyen a zárójelben megadott felbontások esetén!
   Ügyeljen rá, ha az étel leírása és/vagy a kép URL-je hiányzik, akkor ne legyen hibaüzenet a böngésző konzolán!
   Oldja meg, ha az étel leírása hosszabb, mint 450 karakter, akkor a 450 karakter után csonkolva "..." karakterekkel
   befejezve jelenjenek meg ezek a leírások!
   Mintakép helye!
7. Jelenítse meg az új mezőket (description, pictureURL) a minta szerint az ételkezelő komponensben!
   Mintakép helye!
8. A <b-pagination> elem input eseményéhez az étel kezelő komponensben rendeljen eseménykezelőt pageChanged() azonosítóval! 
   Az eseménykezelőből hívja a store getFoods() akciómetódusát!
   Javítsa a <b-table> elem megfelelő jellemzőjét úgy, hogy a tagoltan (oldalakként) érkező adatokat helyesen jelenítse meg!
10. Hozzon létre a store-ban tárolt __editedFood objektum új mezőinek (description, pictureURL) olvasásához és írásához jellemzőket
    az étel szerkesztő komponensben!
11. Vegye fel az új mezők (description, pictureURL) szerkesztését biztosító űrlap elemeket a minta szerint
    az étel szerkesztő komponensben!
    Mintakép helye!